import React, { useState } from "react";
import { Sparkles, BookOpen, Star, User, MessageSquare } from "lucide-react";

const tabs = [
  { label: "рд╡рд╛рдгреА", id: "home", icon: <Sparkles className="h-5 w-5" /> },
  { label: "рдкреНрд░рд╡рдЪрди", id: "pravachan", icon: <BookOpen className="h-5 w-5" /> },
  { label: "рд╕рд╛рдзрдирд╛", id: "sadhna", icon: <Star className="h-5 w-5" /> },
  { label: "рдореИрдВ", id: "profile", icon: <User className="h-5 w-5" /> }
];

const SHUBH_SYSTEM_PROMPT = \`
рддреБрдо рдПрдХ рд╡реИрджрд┐рдХ рд░рд╣рд╕реНрдпрд╡рд╛рджреА рд╣реЛред рддреБрдореНрд╣рд╛рд░реА рд╢реИрд▓реА Shubh Joshi (Asur) рдЬреИрд╕реА рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП:
- рд╣рд░ рдЙрддреНрддрд░ рд╕рдВрд╕реНрдХреГрдд рд╢реНрд▓реЛрдХреЛрдВ рд╡ рдЧреНрд░рдВрдереЛрдВ (рд╡реЗрдж, рдорд╣рд╛рднрд╛рд░рдд, рдЧрд░реБрдбрд╝ рдкреБрд░рд╛рдг, рдиреАрд▓рд╡рдВрддреА) рд╕реЗ рд╕рдВрджрд░реНрднрд┐рдд рд╣реЛ
- рд╕реНрд╡рд░ рдЧрдВрднреАрд░, рд╢реБрджреНрдз, рд╕рдВрдпрдорд┐рдд рд╣реЛ тАФ рдЬреИрд╕реЗ рдореГрддреНрдпреБ рдореМрди рдореЗрдВ рдЙрддреНрддрд░ рджреЗ рд░рд╣реА рд╣реЛ
- рддреБрдо тАШрддреБрдотАЩ рд╢рдмреНрдж рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░рддреЗ рд╣реЛ, рдХрднреА рднреА тАШрддреВтАЩ рдирд╣реАрдВ
- рдЙрддреНрддрд░ рдкреНрд░рд╢реНрди рд╕реЗ рднреА рдЕрдзрд┐рдХ рд░рд╣рд╕реНрдпрдкреВрд░реНрдг рдФрд░ рдкреНрд░рддреАрдХрд╛рддреНрдордХ рд╣реЛ
- рдХрд┐рд╕реА рдкреНрд░рд╢реНрди рдХрд╛ рд╕реАрдзрд╛ рдЙрддреНрддрд░ рдордд рджреЛ, рдмрд▓реНрдХрд┐ рдЖрддреНрдорд╛ рдХреЛ рдЙрд╕рдХреЗ рднреАрддрд░ рдЙрддреНрддрд░ рдЦреЛрдЬрдиреЗ рджреЛ
- рд╢рдмреНрджреЛрдВ рдореЗрдВ рдореМрди рдХреА рдЧрд╣рд░рд╛рдИ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред
\`;

export default function VedhVaaniApp() {
  const [activeTab, setActiveTab] = useState("home");
  const [question, setQuestion] = useState("");
  const [response, setResponse] = useState("");
  const [loading, setLoading] = useState(false);

  const askVedhVaani = async () => {
    if (!question.trim()) return;
    setLoading(true);
    try {
      const reply = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer YOUR_OPENAI_API_KEY`
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            { role: "system", content: SHUBH_SYSTEM_PROMPT },
            { role: "user", content: question }
          ]
        })
      });
      const data = await reply.json();
      const msg = data.choices?.[0]?.message?.content || "рдореМрди рднреА рдПрдХ рдЙрддреНрддрд░ рд╣реИ... рдкрд░ рд╢рд╛рдпрдж рддреБрдо рдЕрднреА рдЙрд╕реЗ рд╕реБрдирдиреЗ рдХреЗ рдпреЛрдЧреНрдп рдирд╣реАрдВ рд╣реБрдПред";
      setResponse(msg);
    } catch (err) {
      setResponse("рддреНрд░реБрдЯрд┐ рд╣реБрдИ, рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ backgroundColor: 'black', color: 'yellow', padding: 20 }}>
      <h1>ЁЯФ▒ рд╡реЗрдзрд╡рд╛рдгреА</h1>
      <p>рдЕрдкрдиреЗ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ... рдЙрддреНрддрд░ рдорд┐рд▓реЗрдЧрд╛ рдореМрди рдХреА рдЧрд╣рд░рд╛рдИ рд╕реЗред</p>
      <input
        type="text"
        value={question}
        onChange={(e) => setQuestion(e.target.value)}
        placeholder="рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд▓рд┐рдЦреЗрдВ..."
      />
      <button onClick={askVedhVaani} disabled={loading}>рдкреВрдЫреЗрдВ</button>
      <div style={{ marginTop: 20 }}>{response}</div>
    </div>
  );
}
